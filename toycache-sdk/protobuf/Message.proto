syntax = "proto3";
 //定义protobuf的包名称空间
package toycache;

option java_package = "com.t0ugh.sdk.proto";
option java_outer_classname = "Proto";

import "Database.proto";
import "ZooKeeper.proto";

enum MessageType {
  Invalid = 0;

  // 对KEY操作的命令
  Exists = 1;
  Del = 2;
  Expire = 7;
//  Type = 3;

  // 对String操作的命令
  Get = 4;
  Set = 5;
//  GetSet = 6; // 设置指定 key 的值，并返回 key 的旧值。

  // 控制操作
  Save = 8; // 后台开个线程存, 约等于Redis的SAVE
  RewriteLog = 9; // 重写日志(压缩日志)

  // 集合操作
  SAdd = 10; // 向集合中添加
  SCard = 11; // 查询集合中元素个数
  SIsMember = 12; // 查询元素是否在集合中
  SMembers = 13; // 返回集合中所有的元素
  SPop = 14; // 随机删除并返回N个元素
  SRem = 15; // 删除
  SRandMember = 16; // 随机返回N个元素

  // 列表操作
  LPush = 17; // 向列表头部插入元素
  LIndex = 18; // 获取index位置的元素
  LLen = 19; // 返回列表的长度
  LPop = 20; // 删除并返回表头元素
  LRange = 21; // 获取指定范围内的元素列表
  LTrim = 22; // 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
  LSet = 23; // 通过索引设置列表中的元素

  // map操作
  HSet = 24; // 向map中插入一个kv对
  HExists = 25; // 判断map中的kv对存不存在
  HGet = 26; // 获取map中的一个v
  HGetAll = 27;// 获取map中所有kv对
  HKeys = 28; // 返回Map中所有的k
  HLen = 29; // 返回Map中元素个数
  HDel = 30; //删除Map中元素

  // 有序集合操作
  ZAdd = 31; // 添加元素
  ZCard = 32; // 元素个数
  ZCount = 33; // 分数值在 min 和 max 之间的成员的数量
  ZRank = 34; // 返回有序集中指定成员的排名
  ZRange = 35; // 返回有序集中，指定区间内的成员按分数值从大到小排序
  ZRangeByScore = 36; // 返回有序集中，分数值大于等于min小于等于max的所有元素
  ZRem = 37; // 删除

  // 事务
  Multi = 38;
  CheckGet = 39;
  CheckExists = 40;
  CheckLIndex = 41;
  CheckLLen = 42;
  CheckLRange = 43;
  CheckHExists = 44;
  CheckHGet = 45;
  CheckHGetAll = 46;
  CheckHKeys = 47;
  CheckHLen = 48;
  CheckSCard = 49;
  CheckSIsMember = 50;
  CheckSMembers = 51;
  CheckZCard = 52;
  CheckZCount = 53;
  CheckZRange = 54;
  CheckZRangeByScore = 55;
  CheckZRank = 56;

  // 内部消息
  InnerClearExpire = 101;
  InnerSave = 102;
  InnerSaveFinish = 103;
  InnerRewriteLog = 104;
  InnerRewriteLogFinish = 105;
  InnerMasterUpdateFollowerProcess = 106;
  InnerStartSync = 107;
  InnerCreateClient = 108;
  InnerCreateFollowerToZK = 109;
  InnerStartSave = 110;
  InnerCloneValue = 111;

  FollowerOf = 201;//客户端发给主服务器，告诉它某个服务器是它的新的从服务器
  Sync = 202;//主服务器发给从服务器, 里面可能有快照也可能有缓存, 让从服务器应用这些命令
}

enum ResponseCode {
  // 未知错误
  Unknown = 0;
  // 成功
  OK = 1;
  // 非法的参数
  InvalidParam = 2;
  // 操作对应的key与storage中的ValueObject对应不上 todo 这句话说的也太不清不楚了, 重新组织一下
  ValueTypeNotMatch = 3;
  // 指定的Key已经过期了
  KeyExpired = 4;
  // 不支持此MessageType
  MessageTypeNotSupported = 5;
  // Check检查没通过
  CheckNotPass = 6;
  // Sync的时候发生的错误
  SyncError = 7;
  // 服务器繁忙
  ServerBusy = 8;
}

message Request {
  MessageType messageType = 1;
  int64 writeId = 2;
  string clientTId = 3;
  int64 epoch = 4;
  ExistsRequest existsRequest = 5;
  DelRequest delRequest = 6;
  GetRequest getRequest = 7;
  SetRequest setRequest = 8;
  ExpireRequest expireRequest = 9;
  SaveRequest saveRequest = 10;
  InnerRewriteLogFinishRequest innerRewriteLogFinishRequest = 11;
  RewriteLogRequest rewriteLogRequest = 12;
  InnerSaveFinishRequest innerSaveFinishRequest = 13;
  SAddRequest sAddRequest = 14;
  SCardRequest sCardRequest = 15;
  SIsMemberRequest sIsMemberRequest = 16;
  SMembersRequest sMembersRequest = 17;
  SPopRequest sPopRequest = 18;
  SRemRequest sRemRequest = 19;
  SRandMemberRequest sRandMemberRequest = 20;
  LPushRequest lPushRequest = 21;
  LIndexRequest lIndexRequest = 22;
  LLenRequest lLenRequest = 23;
  LPopRequest lPopRequest = 24;
  LRangeRequest lRangeRequest = 25;
  LTrimRequest lTrimRequest = 26;
  LSetRequest lSetRequest = 27;
  HSetRequest hSetRequest = 28;
  HExistsRequest hExistsRequest = 29;
  HGetRequest hGetRequest = 30;
  HGetAllRequest hGetAllRequest = 31;
  HKeysRequest hKeysRequest = 32;
  HLenRequest hLenRequest = 33;
  HDelRequest hDelRequest = 34;
  ZAddRequest zAddRequest = 35;
  ZCardRequest zCardRequest = 36;
  ZCountRequest zCountRequest = 37;
  ZRankRequest zRankRequest = 38;
  ZRangeRequest zRangeRequest = 39;
  ZRangeByScoreRequest zRangeByScoreRequest = 40;
  ZRemRequest zRemRequest = 41;
  MultiRequest multiRequest = 42;
  CheckGetRequest checkGetRequest = 43;
  CheckExistsRequest checkExistsRequest = 44;
  CheckLIndexRequest checkLIndexRequest = 45;
  CheckLLenRequest checkLLenRequest = 46;
  CheckLRangeRequest checkLRangeRequest = 47;
  CheckHExistsRequest checkHExistsRequest = 48;
  CheckHGetRequest checkHGetRequest = 49;
  CheckHGetAllRequest checkHGetAllRequest = 50;
  CheckHKeysRequest checkHKeysRequest = 51;
  CheckHLenRequest checkHLenRequest = 52;
  CheckSIsMemberRequest checkSIsMemberRequest = 53;
  CheckSMembersRequest checkSMembersRequest = 54;
  CheckZCardRequest checkZCardRequest = 55;
  CheckZCountRequest checkZCountRequest = 56;
  CheckZRangeRequest checkZRangeRequest = 57;
  CheckZRangeByScoreRequest checkZRangeByScoreRequest = 58;
  CheckZRankRequest checkZRankRequest = 59;
  InnerClearExpireRequest innerClearExpireRequest = 60;
  InnerSaveRequest innerSaveRequest = 61;
  FollowerOfRequest followerOfRequest = 62;
  SyncRequest syncRequest = 63;
  InnerMasterUpdateFollowerProcessRequest innerMasterUpdateFollowerProcessRequest = 64;
  InnerStartSyncRequest innerStartSyncRequest = 65;
  InnerRewriteLogRequest innerRewriteLogRequest = 66;
  InnerCreateClientRequest innerCreateClientRequest = 67;
  InnerCreateFollowerToZKRequest innerCreateFollowerToZKRequest = 68;
  InnerStartSaveRequest innerStartSaveRequest = 69;
  InnerCloneValueRequest innerCloneValueRequest = 70;
}

message Response {
  MessageType messageType = 1;
  ResponseCode responseCode = 2;
  int64 writeId = 3;
  string clientTId = 4;
  ExistsResponse existsResponse = 5;
  DelResponse delResponse = 6;
  GetResponse getResponse = 7;
  SetResponse setResponse = 8;
  ExpireResponse expireResponse = 9;
  SaveResponse saveResponse = 10;
  InnerRewriteLogResponse innerRewriteLogResponse = 11;
  InnerRewriteLogFinishResponse innerRewriteLogFinishResponse = 12;
  RewriteLogResponse rewriteLogResponse = 13;
  InnerSaveFinishResponse innerSaveFinishResponse = 14;
  SAddResponse sAddResponse = 15;
  SCardResponse sCardResponse = 16;
  SIsMemberResponse sIsMemberResponse = 17;
  SMembersResponse sMembersResponse = 18;
  SPopResponse sPopResponse = 19;
  SRemResponse sRemResponse = 20;
  SRandMemberResponse sRandMemberResponse = 21;
  LPushResponse lPushResponse = 22;
  LIndexResponse lIndexResponse = 23;
  LLenResponse lLenResponse = 24;
  LPopResponse lPopResponse = 25;
  LRangeResponse lRangeResponse = 26;
  LTrimResponse lTrimResponse = 27;
  LSetResponse lSetResponse = 28;
  HSetResponse hSetResponse = 29;
  HExistsResponse hExistsResponse = 30;
  HGetResponse hGetResponse = 31;
  HGetAllResponse hGetAllResponse = 32;
  HKeysResponse hKeysResponse = 33;
  HLenResponse hLenResponse = 34;
  HDelResponse hDelResponse = 35;
  ZAddResponse zAddResponse = 36;
  ZCardResponse zCardResponse = 37;
  ZCountResponse zCountResponse = 38;
  ZRankResponse zRankResponse = 39;
  ZRangeResponse zRangeResponse = 40;
  ZRangeByScoreResponse zRangeByScoreResponse = 41;
  ZRemResponse zRemResponse = 42;
  MultiResponse multiResponse = 43;
  CheckGetResponse checkGetResponse = 44;
  CheckExistsResponse checkExistsResponse = 45;
  CheckLIndexResponse checkLIndexResponse = 46;
  CheckLLenResponse checkLLenResponse = 47;
  CheckLRangeResponse checkLRangeResponse = 48;
  CheckHExistsResponse checkHExistsResponse = 49;
  CheckHGetResponse checkHGetResponse = 50;
  CheckHGetAllResponse checkHGetAllResponse = 51;
  CheckHKeysResponse checkHKeysResponse = 52;
  CheckHLenResponse checkHLenResponse = 53;
  CheckSIsMemberResponse checkSIsMemberResponse = 54;
  CheckSMembersResponse checkSMembersResponse = 55;
  CheckZCardResponse checkZCardResponse = 56;
  CheckZCountResponse checkZCountResponse = 57;
  CheckZRangeResponse checkZRangeResponse = 58;
  CheckZRangeByScoreResponse checkZRangeByScoreResponse = 59;
  CheckZRankResponse checkZRankResponse = 60;
  InnerClearExpireResponse innerClearExpireResponse = 61;
  InnerSaveResponse innerSaveResponse = 62;
  FollowerOfResponse followerOfResponse = 63;
  SyncResponse syncResponse = 64;
  InnerMasterUpdateFollowerProcessResponse innerMasterUpdateFollowerProcessResponse = 65;
  InnerStartSyncResponse innerStartSyncResponse = 66;
  InnerCreateClientResponse innerCreateClientResponse = 67;
  InnerCreateFollowerToZKResponse innerCreateFollowerToZKResponse = 68;
  InnerStartSaveResponse innerStartSaveResponse = 69;
  InnerCloneValueResponse innerCloneValueResponse = 70;
}

message InnerCloneValueRequest {
    string key = 1;
}

message InnerCloneValueResponse {
  KeyValue keyValue = 1;
}

message InnerStartSaveRequest {
  string filePath = 1;
  map<string, uint64> expire = 2;
  repeated string keys = 3;
}

message InnerStartSaveResponse {

}

message InnerCreateFollowerToZKRequest {
  string deletePath = 1;
  string createPath = 2;
  ServerMeta serverMeta = 3;
}

message InnerCreateFollowerToZKResponse {
}

message InnerCreateClientRequest{
  string ip = 1;
  int32 port = 2;
  int64 serverId = 3;
}

message InnerCreateClientResponse{}

message InnerStartSyncRequest{}

message InnerStartSyncResponse{}

message InnerMasterUpdateFollowerProcessRequest {
  int64 groupId = 1;
  int64 serverId = 2;
  int64 lastWriteId = 3;
  string ip = 4;
  int32 port = 5;
}

message InnerMasterUpdateFollowerProcessResponse {}

message SyncRequest {
  int64 groupId = 1;
  int64 serverId = 2;
  int64 epoch = 3;
  Database db = 4;
  repeated Request syncRequests = 5;
}

message SyncResponse {
}

message FollowerOfRequest {
  int64 groupId = 1;
}

message FollowerOfResponse {
  bool ok = 1;
}

message CheckZRankRequest {
  string key = 1;
  string member = 2;
  bool exists = 3;
  int32 rank = 4;
}

message CheckZRankResponse {
  bool pass = 1;
  bool actualExists = 2;
  int32 actualRank = 3;
}

message CheckZRangeByScoreRequest {
  string key = 1;
  double min = 2;
  double max = 3;
  repeated ComparableString values = 4;
}

message CheckZRangeByScoreResponse {
  bool pass = 1;
  repeated ComparableString actualValues = 2;
}

message CheckZRangeRequest {
  string key = 1;
  int32 start = 2;
  int32 end = 3;
  repeated ComparableString values = 4;
}

message CheckZRangeResponse {
  bool pass = 1;
  repeated ComparableString actualValues = 2;
}

message CheckZCountRequest {
  string key = 1;
  double min = 2;
  double max = 3;
  int32 count = 4;
}

message CheckZCountResponse {
  bool pass = 1;
  int32 actualCount = 2;
}

message CheckZCardRequest {
  string key = 1;
  int32 count = 2;
}

message CheckZCardResponse {
  bool pass = 1;
  int32 actualCount = 2;
}

message CheckSMembersRequest {
  string key = 1;
  repeated string setValue = 2;
}

message CheckSMembersResponse {
  bool pass = 1;
  repeated string actualSetValue = 2;
}

message CheckSIsMemberRequest {
  string key = 1;
  string member = 2;
  bool isMember = 3;
}

message CheckSIsMemberResponse {
  bool pass = 1;
  bool actualIsMember = 2;
}

message CheckSCardRequest {
  string key = 1;
  int32 size = 2;
}

message CheckSCardResponse {
  bool pass = 1;
  int32 actualSize = 2;
}

message CheckHLenRequest {
  string key = 1;
  int32 len = 2;
}

message CheckHLenResponse {
  bool pass = 1;
  int32 actualLen = 2;
}

message CheckHKeysRequest {
  string key = 1;
  repeated string fields = 2;
}

message CheckHKeysResponse {
  bool pass = 1;
  repeated string actualFields = 2;
}

message CheckHGetAllRequest {
  string key = 1;
  map<string, string> kvs = 2;
}

message CheckHGetAllResponse {
  bool pass = 1;
  map<string, string> actualKvs = 2;
}

message CheckHGetRequest {
  string key = 1;
  string field = 2;
  string value = 3;
}

message CheckHGetResponse {
  bool pass = 1;
  string actualValue = 2;
}

message CheckHExistsRequest {
  string key = 1;
  string field = 2;
  bool exists = 3;
}

message CheckHExistsResponse {
  bool pass = 1;
  bool actualExists = 2;
}


message CheckLRangeRequest {
  string key = 1;
  int32 start = 2;
  int32 end = 3;
  repeated string values = 4;
}

message CheckLRangeResponse {
  bool pass = 1;
  repeated string values = 2;
}

message CheckLLenRequest {
  string key = 1;
  int32 count = 2;
}


message CheckLLenResponse {
  bool pass = 1;
  int32 actualCount = 2;
}

message CheckLIndexRequest {
  string key = 1;
  int32 index = 2;
  string value = 3;
}

message CheckLIndexResponse {
  bool pass = 1;
  string actualValue = 2;
}

message MultiResponse {
  bool pass = 1;
  repeated Response responses = 2;
  Request causedByRequest = 3;
  Response causedByResponse = 4;
}

message MultiRequest {
  repeated Request requests = 1;
}

message CheckGetRequest {
  string key = 1;
  string value = 2;
}

message CheckGetResponse {
  bool pass = 1;
  string actualValue = 2;
}

message CheckExistsRequest {
  string key = 1;
  bool exists = 2;
}

message CheckExistsResponse {
  bool pass = 1;
  bool actualExists = 2;
}

message ZRangeByScoreRequest {
  string key = 1;
  double min = 2;
  double max = 3;
}

message ZRangeByScoreResponse {
  repeated ComparableString values = 1;
}

message ZRemRequest {
  string key = 1;
  repeated string members = 2;
}

message ZRemResponse {
  int32 deleted = 1;
}

message ZRangeRequest {
  string key = 1;
  int32 start = 2;
  int32 end = 3;
}

message ZRangeResponse {
  repeated ComparableString values = 1;
}

message ZRankRequest {
  string key = 1;
  string member = 2;
}

message ZRankResponse {
  bool exists = 1;
  int32 rank = 2;
}

message ZCardRequest {
  string key = 1;
}

message ZCardResponse {
  int32 count = 1;
}

message ZCountRequest {
  string key = 1;
  double min = 2;
  double max = 3;
}

message ZCountResponse {
  int32 count = 1;
}

message ZAddRequest {
  string key = 1;
  repeated ComparableString values = 2;
}

message ZAddResponse {
  int32 added = 1;
}

message HDelRequest {
  string key = 1;
  repeated string fields = 2;
}


message HDelResponse {
  int32 deleted = 1;
}

message HLenRequest {
  string key = 1;
}

message HLenResponse {
  int32 len = 1;
}

message HKeysRequest {
  string key = 1;
}

message HKeysResponse {
  repeated string fields = 1;
}

message HGetAllRequest {
  string key = 1;
}

message HGetAllResponse {
  map<string, string> kvs = 1;
}

message HGetRequest {
  string key = 1;
  string field = 2;
}

message HGetResponse {
  string value = 1;
}

message HExistsRequest {
  string key = 1;
  string field = 2;
}

message HExistsResponse {
  bool ok = 1;
}

message HSetRequest {
  string key = 1;
  string field = 2;
  string value = 3;
}

message HSetResponse {
  bool ok = 1;
}

message LSetRequest {
  string key = 1;
  int32 index = 2;
  string newValue = 3;
}

message LSetResponse {
  bool ok = 1;
}

message LTrimRequest {
  string key = 1;
  int32 start = 2;
  int32 end = 3;
}

message LTrimResponse {
  bool ok = 1;
}

message LRangeRequest {
  string key = 1;
  int32 start = 2;
  int32 end = 3;
}

message LRangeResponse {
  repeated string values = 1;
}

message LPopRequest {
  string key = 1;
}


message LPopResponse {
  string value = 1;
}

message LLenRequest {
  string key = 1;
}

message LLenResponse {
  uint32 count = 1;
}

message LIndexRequest {
  string key = 1;
  int32 index = 2;
}

message LIndexResponse {
  string value = 1;
}

message LPushRequest {
  string key = 1;
  repeated string value = 2;
}

message LPushResponse {
  uint32 size = 1;
}

message SRandMemberRequest {
  string key = 1;
  uint32 count = 2;
}

message SRandMemberResponse {
  repeated string setValue = 1;
}

message SRemRequest {
  string key = 1;
  repeated string members = 2;
}

message SRemResponse {
  uint32 deleted = 1;
}

message SPopRequest {
  string key = 1;
  uint32 count = 2;
  bool unRand = 3;
  repeated string setValue = 4;
}


message SPopResponse {
  repeated string setValue = 1;
}

message SMembersRequest {
  string key = 1;
}

message SMembersResponse {
  repeated string setValue = 1;
}

message SIsMemberRequest {
  string key = 1;
  string member = 2;
}

message SIsMemberResponse {
  bool isMember = 1;
}

message SCardRequest {
  string key = 1;
}

message SCardResponse {
  int32 size = 1;
}

message SAddRequest {
  string key = 1;
  repeated string setValue = 3;
}


message SAddResponse {
  int32 added = 1;
}

message SaveRequest {
}

message InnerSaveFinishRequest {
  bool ok = 1;
}

message InnerSaveFinishResponse {
  int64 lastWriteId = 1;
  int64 lastEpoch = 2;
  repeated Request requests = 3;
}

message RewriteLogRequest {
}

message RewriteLogResponse {
  bool ok = 1;
}

message SaveResponse {
  bool ok = 1;
}

message InnerSaveRequest {
  Database db = 1;
  string filePath = 2;
}

message InnerRewriteLogRequest {
  Database db = 1;
}

message InnerRewriteLogFinishRequest {
  bool ok = 1;
}

message InnerRewriteLogFinishResponse {
  bool ok = 1;
}

message InnerRewriteLogResponse {
  bool ok = 1;
}

message InnerSaveResponse {
  bool ok = 1;
}

message InnerClearExpireRequest {
}

message InnerClearExpireResponse {
  uint32 cleared = 1;
}

message ExpireRequest {
  string key = 1;
  uint64 expireTime = 2;
}

message ExpireResponse {
  bool ok = 1;
}

message ExistsRequest {
  string key = 1;
}

message ExistsResponse {
  bool exists = 1;
}

message DelRequest {
  string key = 1;
}

message DelResponse {
  bool ok = 1;
}

message GetRequest {
  string key = 1;
}

message GetResponse {
  string value = 1;
}

message SetRequest {
  string key = 1;
  string value = 2;
}

message SetResponse {
  bool ok = 1;
}